import{_ as $,c as d,u as b,r as a,a as A,o as T,b as B,d as i,e as F,f as N,g as n,w as u,h as e,i as I,t as z,j as V,m as D,s as W,p as L,k as M}from"./index-10307767.js";const m=c=>(L("data-v-30873ff1"),c=c(),M(),c),U={class:"appContainer"},j={class:"drawerImage"},R=["src"],q={class:"drawerText"},G={class:"topBar"},H=m(()=>e("div",{class:"title"},[e("h1",null,"Learn ImageProcessing")],-1)),J={class:"topbarIcons"},K={class:"main"},Q={class:"centerIcon"},X=m(()=>e("div",{class:"text"},[e("div",null,"Image")],-1)),Y={class:"centerIcon"},Z=m(()=>e("div",{class:"text"},[e("div",null,"Video")],-1)),ee={class:"centerIcon"},te=m(()=>e("div",{class:"text"},[e("div",null,"Camera")],-1)),se={__name:"welcome",setup(c){const w=d(()=>l.getters.currentOption),l=b();a("left");const p=a(!1);a(5);const r=a({}),P=a({OpenCV:{title:"OpenCV",imgSrc:"src/assets/imgs/opencv.png",content:'OpenCV (Open Source Computer Vision Library: http://opencv.org) is an open-source library that includes several hundreds of computer vision algorithms. The document describes the so-called OpenCV 2.x API, which is essentially a C++ API, as opposed to the C-based OpenCV 1.x API (C API is deprecated and not tested with "C" compiler since OpenCV 2.4 releases)'},Vue:{title:"Vue",imgSrc:"src/assets/imgs/logo.svg",content:"Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。"},"Element +":{title:"Element +",imgSrc:"src/assets/imgs/element-plus-logo.svg",content:"据官方介绍，Element Plus是首个使用 TypeScript + Vue 3.2 开发，提供完整的类型定义文档的Composition API 重构的组件库。由于 Vue 3.0 进行了大版本升级，Element 作为其生态的组件库希望借此机会丢掉历史包袱，所以开发团队对 Element 进行了一次深度重构。换句话说，Element Plus的诞生正是基于Vue3重写了每一行代码。"}}),v=A(),_=d(()=>l.getters.cameraStatus),C=d({get(){return l.getters.theme},set(s){console.log("val",s),l.dispatch("change_Theme",s)}});d(()=>window.innerWidth<=1e3?"small":"large");const O=a("50%");function g(s){r.value=P.value[s],p.value=!0}function h(s){l.dispatch("set_currentOption",s),s!="camera"?v.push({path:`/imageProcessing/${s}`}):(console.log(_.value),_.value=="Normal"?v.push({path:`/imageProcessing/${s}`}):v.push({path:`/noCamera/${_.value}`}))}return T(()=>{console.log("onMounted"),l.dispatch("systemInit"),l.dispatch("set_currentOption","none"),console.log("welcome",w.value)}),B(()=>{console.log("onActivated")}),(s,t)=>{const x=i("el-drawer"),f=i("el-link"),S=i("el-switch"),k=i("PictureFilled"),y=i("VideoPlay"),E=i("CameraFilled");return F(),N("div",U,[n(x,{modelValue:p.value,"onUpdate:modelValue":t[0]||(t[0]=o=>p.value=o),direction:"ltr",size:O.value,title:r.value.title,"show-close":!1},{default:u(()=>[e("div",j,[e("img",{src:r.value.imgSrc},null,8,R)]),e("div",q,[e("p",null,z(r.value.content),1)])]),_:1},8,["modelValue","size","title"]),e("div",G,[H,e("div",J,[n(f,{underline:!1,onClick:t[1]||(t[1]=o=>g("OpenCV"))},{default:u(()=>[V("OpenCV")]),_:1}),n(f,{underline:!1,onClick:t[2]||(t[2]=o=>g("Vue"))},{default:u(()=>[V("Vue")]),_:1}),n(f,{underline:!1,onClick:t[3]||(t[3]=o=>g("Element +"))},{default:u(()=>[V("Element+")]),_:1}),n(S,{modelValue:C.value,"onUpdate:modelValue":t[4]||(t[4]=o=>C.value=o),"active-action-icon":I(D),"inactive-action-icon":I(W)},null,8,["modelValue","active-action-icon","inactive-action-icon"])])]),e("div",K,[e("div",{class:"centerItem",onClick:t[5]||(t[5]=o=>h("image"))},[e("div",Q,[n(k)]),X]),e("div",{class:"centerItem",onClick:t[6]||(t[6]=o=>h("video"))},[e("div",Y,[n(y)]),Z]),e("div",{class:"centerItem",onClick:t[7]||(t[7]=o=>h("camera"))},[e("div",ee,[n(E)]),te])])])}}},ne=$(se,[["__scopeId","data-v-30873ff1"]]);export{ne as default};
